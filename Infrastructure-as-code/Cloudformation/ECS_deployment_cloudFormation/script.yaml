AWSTemplateFormatVersion: 2010-09-09
Description: Creating ECS Cluster
Parameters:
  VPC: 
    Description: Name of an existing VPC for the EC2 instance
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be a valid name
  
  
  SubnetIds: 
    Description: Name of an existing AZs for the EC2 instance
    Type: List<AWS::EC2::Subnet::Id>
    ConstraintDescription: must be a valid name  

  SG: 
    Description: Name of an Security Group for the EC2 instance
    Type: AWS::EC2::SecurityGroup::Id
    ConstraintDescription: must be a valid name 
  KeyName: 
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: aamirKP1
    ConstraintDescription: must be the name of an existing EC2 KeyPair
  
  ClusterName:
    Type: String
    Description: Unique name of the cluster

  TG:
    Type: String
    Description: Name of the target group for the Apllication LoadBalancer

  ImageUrl:
    Type: String
    Description: The url of a docker image that contains the application

  DBpassword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: MYSQL_ROOT_PASSWORD
    ConstraintDescription: Password must be greater than 8 latters
    
  InstaceTypeParam:
    Type: String
    Default: t2.medium
    AllowedValues: 
      - t2.micro
      - t2.medium 
      - m3.medium
      - m3.large
      - c3.large
      - c3.xlarge
    ConstraintDescription: Must be one of them

  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  
Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref "ClusterName"


  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      InstanceType: !Ref 'InstaceTypeParam'
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'ECSAMI'
      SecurityGroups:
          - Ref: 'SG'
      AssociatePublicIpAddress: true


      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}


    
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        Ref: SubnetIds
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: '0'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: EcsInstance
          PropagateAtLaunch: 'true'

  ecsInstanceRole: #ecsInstanceRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'

  

  Taskdefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: 'Assignment-task-php'
      Cpu: '256'
      Memory: '512'
      NetworkMode: 'bridge'
      ContainerDefinitions:
        - Name:  php-apache
          Image: !Ref 'ImageUrl' #improved 
          #Image: '020046395185.dkr.ecr.us-east-1.amazonaws.com/php-apache-image:latest'
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: 'tcp'
          MemoryReservation: 128

  TaskdefinitionMysql: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: 'Assignment-task-mysql'
      Cpu: '256'
      Memory: '512'
      NetworkMode: 'bridge'
      TaskRoleArn: !Ref 'EC2InstanceProfile'
      ContainerDefinitions:  
        - Name:  mysql-php
          Image: 'mysql:latest'
          PortMappings:
            - ContainerPort: 3306
              HostPort: 3306
              Protocol: 'tcp'
          #Memory: 256
          MemoryReservation: 128
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: !Ref "DBpassword"
          # Secrets:
          #   - ValueFrom: !Ref "DBpassword"
          #     Name: MYSQL_ROOT_PASSWORD
              
      
  ServiceA:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListenerRule
    Properties:
      ServiceName: 'app-svc'
      Cluster: !Ref 'ECSCluster'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      TaskDefinition: !Ref 'Taskdefinition'
      HealthCheckGracePeriodSeconds: 60
      LaunchType: 'EC2'
      LoadBalancers:
        - ContainerName: 'php-apache'
          ContainerPort: 80
          TargetGroupArn: !Ref 'TargetGroup'



  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSG

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref TG #problem
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup



  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ["*"]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1




  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'ecsTaskExexuation']


  ecsTaskExexuation: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com, ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'

      - PolicyName: ecs-seceret
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ssm:*' 
            Resource: '*'
            

  ecsServiceRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'
